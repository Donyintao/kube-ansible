- name: Unarchive Kubernets bin files into install directory.
  unarchive:
    src:  'kubernetes-{{ KUBE_VERSION }}.tar.gz'
    dest: '{{ KUBE_HOME_PARENT }}'

- name: Create a Kubernets directory link.
  file:
    src:  '{{ KUBE_HOME_PARENT }}/kubernetes-{{ KUBE_VERSION }}'
    dest: '{{ KUBE_HOME_PATH }}'
    owner: root
    group: root
    state: link

- name: Create kubernetes master certificate on the first kubernetes server.
  shell: '/bin/cp -f {{ KUBE_CERTS_PATH }}/{ca.pem,ca-key.pem,kube-apiserver.pem,kube-apiserver-key.pem,kube-controller-manager.pem,kube-controller-manager-key.pem,kube-scheduler.pem,kube-scheduler-key.pem} {{ KUBE_HOME_PATH }}/etc/ssl'
  run_once: true
  delegate_to: "{{ groups['kube-master'][0] }}"

- name: Slurp kubernetes master certificate on the first kubernetes server.
  slurp:
    src: "{{ item }}"
  register: KUBE_MASTER_CERTS
  run_once: true
  delegate_to: "{{ groups['kube-master'][0] }}"
  with_items:
    - "{{ KUBE_HOME_PATH }}/etc/ssl/ca.pem"
    - "{{ KUBE_HOME_PATH }}/etc/ssl/ca-key.pem"
    - "{{ KUBE_HOME_PATH }}/etc/ssl/kube-apiserver.pem"
    - "{{ KUBE_HOME_PATH }}/etc/ssl/kube-apiserver-key.pem"
    - "{{ KUBE_HOME_PATH }}/etc/ssl/kube-controller-manager.pem"
    - "{{ KUBE_HOME_PATH }}/etc/ssl/kube-controller-manager-key.pem"
    - "{{ KUBE_HOME_PATH }}/etc/ssl/kube-scheduler.pem"
    - "{{ KUBE_HOME_PATH }}/etc/ssl/kube-scheduler-key.pem"

- name: Copy kubernetes master certificate file to other kubernetes servers.
  copy:
    dest: "{{ item.item }}"
    content: "{{ item.content | b64decode }}"
    owner: root
    group: root
    mode: 0644
  with_items: "{{ KUBE_MASTER_CERTS.results }}"

# Install kube-apiserver service
- include: kube-apiserver_install.yml

# Install kube-controller-manager service
#- include: kube-controller-manager_install.yml

# Install kube-scheduler
#- include: kube-scheduler_install.yml
